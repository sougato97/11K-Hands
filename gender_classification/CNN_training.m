%Copyright (c) 2017 Mahmoud Afifi
%York University - Assiut University

%Please cite our paper if you use the provided source code, pre-trained models, or the dataset.
%Citation information is provided in the readme file (can be found in the dataset webpage).

%Permission is hereby granted, free of charge, to any person obtaining  a copy of this software and associated documentation files (the "Software"), to deal in the Software with restriction for its use for research purpose only, subject to the following conditions:

%The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

%Please cite our paper if you use the provided source code, pre-trained models, or the dataset.
%Citation information is provided in the readme file (can be found in the dataset webpage).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%CNN training (transfer learning)

%%
%If the Neural Network Toolbox Model for CNN Network support package
%is not installed, then the function provides a link to the required support
%package in the Add-On Explorer. To install the support package, click the
%link, and then click Install. Check that the installation is successful by
%typing the model name (e.g. alexnet, vgg16, vgg19, and googlenet) at the
%command line.
%Remember, alexnet, vgg16, and vgg19 require Matlab 2016 or higher.
%Googlenet or our model require Matlab 2017b or higher.

clear
cnn_model='ours'; %'alexnet', 'vgg16', 'vgg19', 'googlenet', or 'ours'
side_='dorsal'; %'dorsal' or 'palmar'
for i=[1:10] %do the experiments using the 10 folds generated by get_data.m
    close all
    %training data
    rootFolder=fullfile('gender',num2str(i),strcat('training_',side_));
    rootFolder2=fullfile('gender',num2str(i),strcat('testing_',side_));
    
    if strcmpi(cnn_model,'ours')==1
        disp('Preprocessing .. it may take awhile!')
        apply_preprocessing_to_all(rootFolder,fullfile(rootFolder,'ours')); %if you are going to repeat the process, you can comment out this line
        apply_preprocessing_to_all(rootFolder2,fullfile(rootFolder2,'ours')); %if you are going to repeat the process, you can comment out this line
        rootFolder=fullfile('gender',num2str(i),strcat('training_',side_),'ours');
        rootFolder2=fullfile('gender',num2str(i),strcat('testing_',side_),'ours');
        
    end
    
 
 
    
    categories={'male','female'};
    trainingImages = imageDatastore(fullfile(rootFolder, categories), 'LabelSource', 'foldernames');
    testingImages = imageDatastore(fullfile(rootFolder2, categories), 'LabelSource', 'foldernames');
    
    if strcmpi(cnn_model,'alexnet')==1 %alexnet
        trainingImages.ReadFcn = @(filename)readAndPreprocessImage_alex(filename);
        testingImages.ReadFcn = @(filename)readAndPreprocessImage_alex(filename);
    elseif strcmpi(cnn_model,'ours')==1 %ours
        trainingImages.ReadFcn = @(filename)readAndPreprocessImage_ours1(filename);
        testingImages.ReadFcn = @(filename)readAndPreprocessImage_ours1(filename);
    else %vgg, googlenet
        trainingImages.ReadFcn = @(filename)readAndPreprocessImage(filename);
        testingImages.ReadFcn = @(filename)readAndPreprocessImage(filename);
    end
    
    if strcmpi(cnn_model,'googlenet')~=1 && strcmpi(cnn_model,'ours')~=1
        switch cnn_model
            case 'alexnet'
                net = alexnet();
                if strcmp(side_,'palmar')
                    model=strcat('alexnet_p_',num2str(i));
                    conf_name=strcat('alexnet_results_p_',num2str(i),'.mat');
                else
                    model=strcat('alexnet_d_',num2str(i));
                    conf_name=strcat('alexnet_results_d_',num2str(i),'.mat');
                end
                
            case 'vgg16'
                net = vgg16();
                if strcmp(side_,'palmar')
                    model=strcat('vgg16_p_',num2str(i));
                    conf_name=strcat('vgg16_results_p_',num2str(i),'.mat');
                else
                    model=strcat('vgg16_d_',num2str(i));
                    conf_name=strcat('vgg16_results_d_',num2str(i),'.mat');
                end
            case 'vgg19'
                net = vgg19();
                if strcmp(side_,'palmar')
                    model=strcat('vgg19_p_',num2str(i));
                    conf_name=strcat('vgg19_results_p_',num2str(i),'.mat');
                else
                    model=strcat('vgg19_d_',num2str(i));
                    conf_name=strcat('vgg19_results_d_',num2str(i),'.mat');
                end
        end
        
        layersTransfer = net.Layers(1:end-3);
        numClasses = numel(unique(trainingImages.Labels));
        layers = [
            layersTransfer
            fullyConnectedLayer(numClasses,'WeightLearnRateFactor',20,'BiasLearnRateFactor',20)
            softmaxLayer
            classificationLayer];
        
        miniBatchSize = 60;
        numIterationsPerEpoch = floor(numel(trainingImages.Labels)/miniBatchSize);
        options = trainingOptions('sgdm',...
            'MiniBatchSize',miniBatchSize,...
            'MaxEpochs',30,...
            'InitialLearnRate',0.0001,'OutputFcn',@plotTrainingAccuracy);
        tic;
        net = trainNetwork(trainingImages,layers,options);
        t_training=toc;
    elseif strcmpi(cnn_model,'googlenet')==1
        if strcmp(side_,'palmar')
            model=strcat('googlenet_p_',num2str(i));
            conf_name=strcat('googlenet_results_p_',num2str(i),'.mat');
        else
            model=strcat('googlenet_d_',num2str(i));
            conf_name=strcat('googlenet_results_d_',num2str(i),'.mat');
        end
        
        net=googlenet();
        lgraph = layerGraph(net);
        lgraph = removeLayers(lgraph, {'loss3-classifier','prob','output'});
        numClasses = numel(unique(trainingImages.Labels));
        newLayers = [
            fullyConnectedLayer(numClasses,'Name','fc','WeightLearnRateFactor',20,'BiasLearnRateFactor', 20)
            softmaxLayer('Name','softmax')
            classificationLayer('Name','classoutput')];
        lgraph = addLayers(lgraph,newLayers);
        lgraph = connectLayers(lgraph,'pool5-drop_7x7_s1','fc');
        miniBatchSize = 60;
        numIterationsPerEpoch = floor(numel(trainingImages.Labels)/miniBatchSize);
        options = trainingOptions('sgdm',...
            'MiniBatchSize',miniBatchSize,...
            'MaxEpochs',30,...
            'InitialLearnRate',0.0001,'OutputFcn',@plotTrainingAccuracy);
       tic;
       net = trainNetwork(trainingImages,lgraph,options);
        t_training=toc;
        
        
    elseif strcmpi(cnn_model,'ours')==1
        t_training=0;
        if strcmp(side_,'palmar')
            model=strcat('low_ours_p_',num2str(i));
            conf_name=strcat('low_ours_results_p_',num2str(i),'.mat');
        else
            model=strcat('low_ours_d_',num2str(i));
            conf_name=strcat('low_ours_results_d_',num2str(i),'.mat');
        end
        [param] = getParam();
        layers=getModel(param,1,[],[]);
        miniBatchSize = 60;
        numIterationsPerEpoch = floor(numel(trainingImages.Labels)/miniBatchSize);
        options = trainingOptions('sgdm',...
            'MiniBatchSize',miniBatchSize,...
            'MaxEpochs',20,... %it was 30 for other models
            'InitialLearnRate',0.0001,'OutputFcn',@plotTrainingAccuracy);
        tic;
        net1 = trainNetwork(trainingImages,layers,options);
        t_training=t_training+toc;
        %save(strcat(model,'.mat'),'net1');
        [YPred] = classify(net1,testingImages);
        YTest = testingImages.Labels;
        % Tabulate the results using a confusion matrix.
        confMat = confusionmat(YTest, YPred);
        % Convert confusion matrix into percentage form
        confMat = bsxfun(@rdivide,confMat,sum(confMat,2));
        save(conf_name,'confMat');
        
        close all
        tic;
        trainingImages.ReadFcn = @(filename)readAndPreprocessImage_ours2(filename);
        testingImages.ReadFcn = @(filename)readAndPreprocessImage_ours2(filename);
        
         if strcmp(side_,'palmar')
            model=strcat('high_ours_p_',num2str(i));
            conf_name=strcat('high_ours_results_p_',num2str(i),'.mat');
        else
            model=strcat('high_ours_d_',num2str(i));
            conf_name=strcat('high_ours_results_d_',num2str(i),'.mat');
         end
        layers=getModel(param,2,[],[]);
        miniBatchSize = 60;
        numIterationsPerEpoch = floor(numel(trainingImages.Labels)/miniBatchSize);
        options = trainingOptions('sgdm',...
            'MiniBatchSize',miniBatchSize,...
            'MaxEpochs',20,... %it was 30 for other models
            'InitialLearnRate',0.0001,'OutputFcn',@plotTrainingAccuracy);
        tic;
        net2 = trainNetwork(trainingImages,layers,options);
        t_training=t_training+toc;
        %save(strcat(model,'.mat'),'net2');
        [YPred] = classify(net2,testingImages);
        YTest = testingImages.Labels;
        % Tabulate the results using a confusion matrix.
        confMat = confusionmat(YTest, YPred);
        % Convert confusion matrix into percentage form
        confMat = bsxfun(@rdivide,confMat,sum(confMat,2));
        save(conf_name,'confMat');
        
         close all
        
        trainingImages.ReadFcn = @(filename)readAndPreprocessImage_ours3(filename);
        testingImages.ReadFcn = @(filename)readAndPreprocessImage_ours3(filename);
        
        [lgraph]=getModel(param,3,net1,net2);
        
       
         if strcmp(side_,'palmar')
            model=strcat('ours_p_',num2str(i));
            conf_name=strcat('ours_results_p_',num2str(i),'.mat');
        else
            model=strcat('ours_d_',num2str(i));
            conf_name=strcat('ours_results_d_',num2str(i),'.mat');
        end
         
        clear net1 net2;
         
         
        miniBatchSize = 60;
        numIterationsPerEpoch = floor(numel(trainingImages.Labels)/miniBatchSize);
        options = trainingOptions('sgdm',...
            'MiniBatchSize',miniBatchSize,...
            'MaxEpochs',9,... %it was 30 for other models
            'InitialLearnRate',0.0001,'OutputFcn',@plotTrainingAccuracy);
        tic;
         net = trainNetwork(trainingImages,lgraph,options);
         t_training=t_training+toc;
         
         
    end
    
    save(strcat(model,'.mat'),'net');
    tic;
    [YPred] = classify(net,testingImages);
    t_testing=toc;
    YTest = testingImages.Labels;
    % Tabulate the results using a confusion matrix.
    confMat = confusionmat(YTest, YPred);
    
    % Convert confusion matrix into percentage form
    confMat = bsxfun(@rdivide,confMat,sum(confMat,2));
    save(conf_name,'confMat');
    sprintf('The result for %s %s - number %s: %f',cnn_model, side_(1),num2str(i),mean(diag(confMat)))
    sprintf('Time training: %f - testing: %f',t_training,(t_testing/length(YTest)))
    
    clear net
end